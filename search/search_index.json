{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\ud83d\udcd6 Documentation Guide","text":"<p>The project contains built-in documentation written in Markdown and displayed using MkDocs with the Material theme.</p>"},{"location":"#how-to-run-the-documentation-development-mode","title":"\ud83d\udee0\ufe0f How to run the documentation (development mode)","text":"<ol> <li>Go to the project root:</li> </ol> <p><code>cd kraken_webui</code></p> <ol> <li>Make sure <code>mkdocs-material</code> is installed:    (install it in a virtual environment or with pipx)</li> </ol> <pre><code>python -m venv /env\nsource env/bin/activate\npip install -r requirements.txt\n</code></pre> <ol> <li>Start the local documentation server:</li> </ol> <p><code>mkdocs serve</code></p> <ol> <li>Open it in your browser:</li> </ol> <p>http://127.0.0.1:8000</p>"},{"location":"#additional-commands","title":"\ud83d\udee0\ufe0f Additional commands","text":"<ul> <li> <p>Build the static site: <code>mkdocs build</code>   The result will be in the <code>site/</code> folder.</p> </li> <li> <p>Deploy to GitHub Pages: (requires a configured GitHub repository) <code>mkdocs gh-deploy</code></p> </li> </ul>"},{"location":"#useful-tips","title":"\ud83d\udca1 Useful Tips","text":"<ul> <li>The Markdown documentation files are located in the <code>docs/</code> folder.</li> <li>The structure and navigation are configured in the <code>mkdocs.yml</code> file.</li> <li>Changes in Markdown files are automatically reflected when refreshing the page.</li> </ul>"},{"location":"license/","title":"MIT licence","text":"<p>Copyright 2024 Anshul Chahar, Artur Galyautdinov, Christina Evangelidou, David Le, Mahta Mollaeian</p> <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software and associated documentation files (the \u201cSoftware\u201d), to deal in the Software without restriction, including without limitation the rights to use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software, and to permit persons to whom the Software is furnished to do so, subject to the following conditions:</p> <p>The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.</p> <p>THE SOFTWARE IS PROVIDED \u201cAS IS\u201d, WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.</p>"},{"location":"developer_guide/architecture/","title":"\ud83c\udfd7\ufe0f Application Architecture","text":"<p>This document provides an overview of how Kraken Web UI is structured and how its components interact.</p>"},{"location":"developer_guide/architecture/#technology-stack","title":"\u2699\ufe0f Technology Stack","text":"<p>Kraken Web UI is built using the following technologies:</p> <ul> <li>Frontend: Next.js (React framework)</li> <li>Backend: Next.js API Routes</li> <li>Database: MongoDB</li> <li>State Management: Local state (React hooks)</li> <li>Containerization: Docker</li> <li>CI/CD: GitHub Actions</li> <li>Testing: Jest (unit &amp; integration tests)</li> <li>Code Quality: ESLint (linting), Prettier (formatting)</li> </ul>"},{"location":"developer_guide/architecture/#system-architecture-overview","title":"\ud83c\udfdb\ufe0f System Architecture Overview","text":"<p>The system follows a modular, component-based architecture, separating concerns between Frontend, Backend, and Database.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510       \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510        \u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502 Frontend \u2502 &lt;--&gt;  \u2502 API (Next.js) \u2502 &lt;--&gt;   \u2502 MongoDB  \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518       \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518        \u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre> <ol> <li> <p>Frontend (Next.js)</p> </li> <li> <p>Renders UI components.</p> </li> <li>Handles user interactions.</li> <li> <p>Calls API routes for data.</p> </li> <li> <p>Backend (Next.js API)</p> </li> <li> <p>Provides RESTful API endpoints.</p> </li> <li>Interacts with MongoDB.</li> <li> <p>Performs business logic.</p> </li> <li> <p>Database (MongoDB)</p> </li> <li> <p>Stores sensor data and configurations.</p> </li> <li>Queries and updates data.</li> </ol>"},{"location":"developer_guide/architecture/#data-flow","title":"\ud83d\udd04 Data Flow","text":"<ol> <li>The user interacts with the UI (e.g., adds a sensor).</li> <li>The Frontend sends a request to the Next.js API.</li> <li>The API processes the request and communicates with MongoDB.</li> <li>The response is sent back to the Frontend, updating the UI.</li> </ol>"},{"location":"developer_guide/architecture/#main-directories-and-responsibilities","title":"\ud83d\udcc2 Main Directories and Responsibilities","text":"<ul> <li><code>src/components/</code> \u2192 UI components.</li> <li><code>src/models/</code> \u2192 Database schemas.</li> <li><code>src/actions/</code> \u2192 Logic for interacting with the backend.</li> <li><code>tests/</code> \u2192 Automated tests using Jest.</li> <li><code>.eslintrc.json</code> / <code>.prettierignore</code> \u2192 Code linting &amp; formatting configurations.</li> </ul>"},{"location":"developer_guide/architecture/#deployment-cicd","title":"\ud83d\ude80 Deployment &amp; CI/CD","text":"<ul> <li>The project is deployed using GitHub Actions and Docker.</li> <li>The CI/CD pipeline includes:</li> <li>Code Quality Checks<ul> <li>Runs ESLint to ensure best practices.</li> <li>Runs Prettier to format the code.</li> </ul> </li> <li>Automated Testing<ul> <li>Runs Jest tests for both unit and integration testing.</li> </ul> </li> <li>Docker Build &amp; Deployment<ul> <li>Builds and pushes Docker images.</li> <li>Deploys the latest version.</li> </ul> </li> </ul>"},{"location":"developer_guide/components/","title":"\ud83c\udfa8 UI Components","text":"<p>This document provides an overview of the UI components used in Kraken Web UI.</p>"},{"location":"developer_guide/components/#component-structure","title":"\ud83c\udfdb\ufe0f Component Structure","text":"<p>All UI components are organized into two main categories:</p> <pre><code>src/components/\n\u2502\u2500\u2500 mongodb/                   # Components to interact with the database (mongodb)\n\u2502\n\u2502\u2500\u2500 UI/                        # Default reusable UI components (buttons, inputs, etc.)\n\u2502   \u2502\u2500\u2500 button/                # Custom button components\n\u2502   \u2502\u2500\u2500 input/                 # Input fields\n\u2502   \u2502\u2500\u2500 header/                # Header\n\u2502   \u2502\u2500\u2500 ModalWindow/           # Modal dialog windows\n\u2502   \u2502\u2500\u2500 select/                # Dropdown select components\n\u2502   \u2502\u2500\u2500 toggle/                # Toggle switches\n\u2502   \u2502\u2500\u2500 tooltip/               # Custom tooltip\n\u2502   \u251c\u2500\u2500 ConfigEditorModal.tsx  # Modal window for editing configuration of sensors\n\u2502   \u2514\u2500\u2500 InputRow.tsx           # Form row for structured input into the table\n\u2502\n\u2502   # Administrative components\n\u2502\n\u251c\u2500\u2500 MyContent.tsx    # Main content wrapper that renders and manages sensor-related UI components.\n\u251c\u2500\u2500 PostFilter.tsx   # UI component for filtering posts based on various criteria.\n\u251c\u2500\u2500 PostForm.tsx     # Form for creating and editing sensor data.\n\u251c\u2500\u2500 PostHandler.tsx  # Manages sensor-related operations (CRUD) and handles data processing.\n\u251c\u2500\u2500 PostList.tsx     # Displays a list of sensors with filtering, sorting, and dynamic column toggles.\n\u2514\u2500\u2500 TableItem.tsx    # Represents a single row in the sensor table with edit and delete actions.\n</code></pre> <p>Each component is modular, reusable, and categorized for maintainability.</p>"},{"location":"developer_guide/components/#default-ui-components-ui","title":"\ud83d\udd39 Default UI Components (<code>UI/</code>)","text":"<p>These components are small, reusable elements used throughout the application. They do not contain business logic and focus purely on UI styling and functionality.</p> Component Description Buttons (<code>button/</code>) Custom button components, including different styles and variants. Inputs (<code>input/</code>) Standard input fields for text, numbers, and other user input types. Header (<code>header/</code>) The main header component for the application layout. Modals (<code>ModalWindow/</code>) A flexible popup dialog that can contain any component or group of components. It displays them as a modal overlay at a higher level and dynamically adjusts its size based on its children. Selects (<code>select/</code>) Dropdown menus for choosing predefined options. Toggles (<code>toggle/</code>) Switch components to enable/disable settings. Tooltips (<code>tooltip/</code>) Custom tooltips to provide additional context to UI elements. Config Editor Modal (<code>ConfigEditorModal.tsx</code>) Form for editing sensor configurations. Input Row (<code>InputRow.tsx</code>) A structured input row component for table-based data entry. <p>\u2705 Example: Reusable Button Component</p> <pre><code>&lt;MyButton className=\"list-button\" onClick={() =&gt; edit(post)}&gt;\n  &lt;img src=\"/edit.png\" alt=\"Edit\" width={20} height={20} /&gt;\n&lt;/MyButton&gt;\n</code></pre>"},{"location":"developer_guide/components/#complex-components-administrative-components","title":"\ud83d\udd25 Complex Components (Administrative Components)","text":"<p>These components manage complex business logic and often interact with other components. They are not generic and are used for specific application features.</p> Component Purpose MyContent Main content wrapper that renders and manages sensor-related UI components dynamically. PostFilter Provides filtering options for posts, allowing users to narrow down results based on criteria. PostForm Handles creating and editing sensor data, including form validation and user input handling. PostHandler Manages sensor-related operations (CRUD) and processes data before sending it to the backend. PostList Displays a list of sensors with features like filtering, sorting, and dynamic column toggles. TableItem Represents a single row in the sensor table, handling inline editing and delete actions. <p>\u2705 Example: Handling Posts</p> <pre><code>let sensors: tinkerforgeDTO[] = await getAllDocuments();\n\n&lt;PostHandler sensors={sensors} /&gt;;\n</code></pre>"},{"location":"developer_guide/components/#mongodb-components-mongodb","title":"\ud83d\udee2\ufe0f MongoDB Components (<code>mongodb/</code>)","text":"<p>These components are responsible for database operations and data retrieval.</p> Component Purpose DBConnector Manages MongoDB database connection, queries sensor data, and handles deletion."},{"location":"developer_guide/components/#best-practices","title":"\ud83d\udccc Best Practices","text":"<ul> <li>Keep UI components reusable \u2013 avoid mixing them with business logic.</li> <li>Separate concerns \u2013 UI elements go into <code>UI/</code>, complex logic into separate files.</li> <li>Use props to pass data instead of relying on hardcoded values.</li> </ul>"},{"location":"developer_guide/components/#summary","title":"\u2705 Summary","text":"<ul> <li>Two main categories of components:</li> <li>Default UI Components (<code>UI/</code>) \u2192 reusable elements like buttons, inputs, modals.</li> <li>Complex Components (<code>PostHandler</code>, <code>PostList</code>, etc.) \u2192 components with business logic.</li> <li>The structure ensures modularity and maintainability.</li> <li>Follow best practices for clear and structured component organization.</li> </ul>"},{"location":"devops/ci_cd/","title":"CI/CD Process","text":"<p>This project uses GitHub Actions for Continuous Integration (CI) and Continuous Deployment (CD). The configuration is defined in the <code>.github/workflows/ci.yml</code> file.</p>"},{"location":"devops/ci_cd/#cicd-pipeline-overview","title":"\ud83d\udccc CI/CD Pipeline Overview","text":"<p>The pipeline includes the following automated steps:</p> <ul> <li>Checkout the code</li> <li>Set up Node.js</li> <li>Install dependencies</li> <li>Run Jest tests</li> <li>Build and push Docker images to GitHub Container Registry</li> </ul>"},{"location":"devops/ci_cd/#cicd-triggers","title":"\ud83d\udd39 CI/CD Triggers","text":"<p>This pipeline runs automatically on the following events:</p> <ul> <li>Push to <code>master</code> or <code>dev</code> branches \ud83d\udee0\ufe0f</li> <li>Pull requests \ud83d\udce5</li> </ul> <p>You can also manually trigger the pipeline in the GitHub Actions tab.</p>"},{"location":"devops/ci_cd/#technologies-used","title":"\ud83d\udee0\ufe0f Technologies Used","text":"<p>The CI/CD pipeline utilizes:</p> <ul> <li>GitHub Actions \u2192 Workflow automation.</li> <li>ESLint \u2192 Linting JavaScript/TypeScript code.</li> <li>Prettier \u2192 Enforcing code formatting rules.</li> <li>Jest \u2192 Running unit tests.</li> <li>Docker \u2192 Building and pushing containerized applications.</li> </ul>"},{"location":"devops/docker/","title":"Docker Setup","text":"<p>This project uses Docker to simplify the deployment and ensure consistency across different environments.</p>"},{"location":"devops/docker/#why-use-docker","title":"\ud83d\udccc Why Use Docker?","text":"<ul> <li>Eliminates \"works on my machine\" issues.</li> <li>Packages all dependencies into a single container.</li> <li>Simplifies deployment across different environments.</li> </ul>"},{"location":"devops/docker/#dockerfile-overview","title":"\ud83d\udcc2 Dockerfile Overview","text":"<p>The Dockerfile is located in the root directory and follows a multi-stage build approach:</p> <ol> <li><code>base</code> \u2192 Sets up the Node.js environment.</li> <li><code>deps</code> \u2192 Installs project dependencies.</li> <li><code>builder</code> \u2192 Builds the Next.js application.</li> <li><code>runner</code> \u2192 Runs the optimized application container.</li> </ol>"},{"location":"devops/docker/#building-and-running-the-docker-container","title":"\ud83d\udee0\ufe0f Building and Running the Docker Container","text":""},{"location":"devops/docker/#build-the-docker-image","title":"Build the Docker Image","text":"<pre><code>docker build -t kraken-webui .\n</code></pre> <p>This command creates a Docker image with all dependencies included.</p>"},{"location":"devops/docker/#run-the-container","title":"Run the Container","text":"<pre><code>docker run -p 3000:3000 kraken-webui\n</code></pre> <p>This starts a container that runs the application on port 3000.</p>"},{"location":"devops/docker/#stopping-and-removing-containers","title":"\ud83d\uded1 Stopping and Removing Containers","text":"<p>To stop the running container:</p> <pre><code>docker stop &lt;container_id&gt;\n</code></pre> <p>To remove the container:</p> <pre><code>docker rm &lt;container_id&gt;\n</code></pre>"},{"location":"overview/installation/","title":"Installation","text":"<ul> <li> <p>Clone the repository   <code>git clone https://github.com/TU-Darmstadt-APQ/kraken_webui.git</code></p> </li> <li> <p>Go into the app folder   <code>cd kraken_webui/kraken-webui-app/</code></p> </li> <li> <p>Install all node module updates via npm   <code>npm update</code></p> </li> <li> <p>Start the dev server locally for development   <code>npm run dev</code></p> </li> <li> <p>Open the app in your browser   <code>http://localhost:3000</code></p> </li> </ul>"},{"location":"overview/project_structure/","title":"Project Structure","text":"<pre><code>kraken_webui\n    \u251c\u2500\u2500 docs                 # Documentation files (Markdown)\n    \u251c\u2500\u2500 public               # Static files (icons, images)\n    \u251c\u2500\u2500 src                  # Project source code\n    \u2502   \u251c\u2500\u2500 actions          # Actions to communicate with the server\n    \u2502   \u251c\u2500\u2500 app              # NextJS main application\n    \u2502   \u251c\u2500\u2500 components       # React components and modules\n    \u2502   \u2502    \u251c\u2500\u2500 mongodb     # MongoDB CRUD operations\n    \u2502   \u2502    \u2514\u2500\u2500 UI          # Custom UI-components\n    \u2502   \u251c\u2500\u2500 hooks            # Custom hooks\n    \u2502   \u251c\u2500\u2500 models           # MongoDB database models\n    \u2502   \u251c\u2500\u2500 styles           # CSS modules for components\n    \u2502   \u251c\u2500\u2500 types.ts         # TypeScript global types\n    |   \u2514\u2500\u2500 global.css       # Global project styles\n    \u2514\u2500\u2500 tests                # Application tests\n</code></pre>"},{"location":"overview/project_structure/#project-structure","title":"\ud83c\udfd7\ufe0f Project Structure","text":"<p>This document provides an overview of the Kraken Web UI project structure. Understanding the directory layout will help you navigate the codebase more efficiently.</p>"},{"location":"overview/project_structure/#overview","title":"\ud83d\udccc Overview","text":"<p>Kraken Web UI is a Next.js-based web interface for managing sensor configurations. It follows a modular architecture, separating UI components, and database operations.</p>"},{"location":"overview/project_structure/#folder-breakdown","title":"\ud83d\udcc2 Folder Breakdown","text":""},{"location":"overview/project_structure/#docs-documentation","title":"\ud83d\udd39 <code>docs/</code> - Documentation","text":"<p>Contains all Markdown documentation files, structured for MkDocs.</p>"},{"location":"overview/project_structure/#public-static-files","title":"\ud83d\udd39 <code>public/</code> - Static Files","text":"<p>Stores static assets like icons, images, and fonts that are publicly accessible.</p>"},{"location":"overview/project_structure/#src-source-code","title":"\ud83d\udd39 <code>src/</code> - Source Code","text":"<p>The core of the application, containing UI components, database logic etc.</p> <ul> <li><code>actions/</code> \u2192 Handles communication with the backend server.</li> <li><code>app/</code> \u2192 The main Next.js application logic.</li> <li><code>components/</code> \u2192 Reusable React components:</li> <li><code>mongodb/</code> \u2192 MongoDB CRUD operations.</li> <li><code>UI/</code> \u2192 Custom UI components.</li> <li><code>hooks/</code> \u2192 Custom React hooks for state and effects.</li> <li><code>models/</code> \u2192 MongoDB schemas and database models.</li> <li><code>styles/</code> \u2192 CSS modules for component styling.</li> <li><code>types.ts</code> \u2192 TypeScript type definitions.</li> <li><code>global.css</code> \u2192 Global project styles.</li> </ul>"},{"location":"overview/project_structure/#tests-application-tests","title":"\ud83d\udd39 <code>tests/</code> - Application Tests","text":"<ul> <li><code>Frontend_Tests/</code> \u2192 Unit tests for React UI components.</li> <li><code>mongo/</code> \u2192 MongoDB-related tests and database setup scripts.</li> <li><code>Schema_tests/</code> \u2192 Validation tests for MongoDB schemas.</li> </ul>"},{"location":"overview/project_structure/#where-to-find-things","title":"\ud83d\udd0e Where to Find Things?","text":"<ul> <li>Need to create a new UI component? \u2192 Go to <code>src/components/UI/</code>.</li> <li>Looking for database models? \u2192 Check <code>src/models/</code>.</li> <li>Want to style a component? \u2192 Use <code>src/styles/</code>.</li> </ul>"},{"location":"user_guide/troubleshooting/","title":"Troubleshooting Guide","text":"<p>This document provides solutions for common issues that may arise while working with Kraken Web UI.</p>"},{"location":"user_guide/troubleshooting/#general-issues","title":"General Issues","text":""},{"location":"user_guide/troubleshooting/#issue-npm-install-fails","title":"\u274c Issue: <code>npm install</code> fails","text":"<p>Possible causes:</p> <ul> <li>Incorrect Node.js version.</li> <li>Conflicting dependencies.</li> </ul> <p>Solution:</p> <pre><code>rm -rf node_modules package-lock.json\nnpm install\n</code></pre> <p>Make sure you are using the correct Node.js version:</p> <pre><code>node -v\n</code></pre> <p>If needed, update your Node.js version.</p>"},{"location":"user_guide/troubleshooting/#nextjs-issues","title":"Next.js Issues","text":""},{"location":"user_guide/troubleshooting/#issue-application-does-not-start-with-npm-run-dev","title":"\u274c Issue: Application does not start with <code>npm run dev</code>","text":"<p>Error: <code>Error: Cannot find module 'next'</code> Solution:</p> <ol> <li>Ensure dependencies are installed:    <code>bash    npm install</code></li> <li>Check if you have the correct Node.js version:    <code>bash    node -v</code></li> <li>Try clearing Next.js cache and restart:    <code>bash    rm -rf .next    npm run dev</code></li> </ol>"},{"location":"user_guide/troubleshooting/#mongodb-issues","title":"MongoDB Issues","text":""},{"location":"user_guide/troubleshooting/#issue-database-connection-error","title":"\u274c Issue: Database connection error","text":"<p>Error: <code>MongoServerSelectionError: Could not connect to any servers</code> Solution:</p> <ol> <li>Check if MongoDB is running:    <code>bash    docker ps</code>    If it's not running, start it:    <code>bash    docker-compose up -d</code></li> <li>Verify the connection string in <code>.env</code>:    <code>MONGO_URI=mongodb://localhost:27017/sensor_config</code></li> <li>Restart the database service:    <code>bash    docker restart mongo</code></li> </ol>"},{"location":"user_guide/troubleshooting/#docker-issues","title":"Docker Issues","text":""},{"location":"user_guide/troubleshooting/#issue-docker-container-fails-to-start","title":"\u274c Issue: Docker container fails to start","text":"<p>Error: <code>port is already allocated</code> Solution:</p> <ol> <li>Find the process using port 3000:</li> </ol> <pre><code>lsof -i :3000\n</code></pre> <ol> <li>Kill the process:</li> </ol> <pre><code>kill -9 &lt;PID&gt;\n</code></pre> <ol> <li>Restart the container:</li> </ol> <pre><code>docker-compose up --force-recreate --build -d\n</code></pre>"},{"location":"user_guide/troubleshooting/#mkdocs-issues","title":"MkDocs Issues","text":""},{"location":"user_guide/troubleshooting/#issue-documentation-site-does-not-load","title":"\u274c Issue: Documentation site does not load","text":"<p>Solution:</p> <ol> <li>Make sure MkDocs is installed:    <code>bash    pip install mkdocs-material</code></li> <li>Run the documentation server:    <code>bash    mkdocs serve</code></li> <li>Open http://127.0.0.1:8000</li> </ol>"},{"location":"user_guide/troubleshooting/#need-more-help","title":"Need More Help?","text":"<p>If you encounter an issue not listed here, check the logs and open a GitHub issue.</p>"},{"location":"user_guide/usage/","title":"\ud83d\udee0\ufe0f Usage Instructions","text":"<p>This guide provides step-by-step instructions on how to use Kraken Web UI.</p>"},{"location":"user_guide/usage/#searching-for-sensors","title":"\ud83d\udd0e Searching for Sensors","text":"<ol> <li>Locate the search field in the top-right corner of the interface. It is a white input box with placeholder text \"Search for...\".</li> <li>Click inside the search field and type the name, ID, or another property of the sensor you are looking for.</li> <li>The list of sensors will be filtered automatically to match your search input.</li> <li>If no matching sensors are found, the list will appear empty.</li> <li>To reset the search and view all sensors again, clear the input field by deleting the text inside.</li> </ol> <p>\ud83d\udccc Note: The search applies to all sensors and works in combination with sorting.</p>"},{"location":"user_guide/usage/#searching-by-specific-field","title":"\ud83c\udfaf Searching by Specific Field","text":"<ol> <li>Locate the \"Search by\" dropdown menu next to the search bar in the top-right corner.</li> <li>Click the dropdown menu to see a list of available search fields (e.g., Name, ID, Type).</li> <li>Select a field to narrow down the search criteria.</li> <li>Type your search term in the search field. Now, the search will only match results within the selected field.</li> <li>To reset, select \"All\" in the dropdown to search across all fields again.</li> </ol> <p>\ud83d\udccc Example:</p> <ul> <li>If you select \"Type\" and enter <code>\"temperature\"</code>, it will only show temperature sensors.</li> <li>If you select \"ID\", the search will only check sensor IDs.</li> </ul>"},{"location":"user_guide/usage/#sorting-the-sensor-list","title":"\ud83d\udd04 Sorting the Sensor List","text":"<ol> <li>Locate the \"Sort by\" dropdown menu in the top-right corner, next to the search bar.</li> <li>Click on the dropdown to see a list of available sorting options (e.g., Name, Date Added, Sensor Type).</li> <li>Click on one of the options to sort the list accordingly.</li> <li>The list of sensors will be updated instantly and arranged in the selected order.</li> <li>Sorting works together with the search feature. If you search for sensors and then apply sorting, only the filtered results will be sorted.</li> </ol> <p>\ud83d\udccc Note: Sorting is always active, even when filtering the list by search.</p>"},{"location":"user_guide/usage/#adding-a-new-sensor","title":"\u2795 Adding a New Sensor","text":"<ol> <li>In the top-right corner of the interface, find the \"+\" button (Add Sensor).</li> <li>Click the \"+\" button, and a new empty row will appear at the top of the table.</li> <li>Click inside each field of the new row and enter the required sensor details:</li> <li>Name \u2192 Give the sensor a unique name.</li> <li>Type \u2192 Select the sensor type.</li> <li>Other Fields \u2192 Fill in any additional information required.</li> <li>To save the sensor, click the save button (\ud83d\udcbe) in the \"Actions\" column of the new row.</li> <li>If you want to cancel adding the sensor, click the \"\u274c\" button to remove the row without saving.</li> </ol> <p>\ud83d\udccc Note:</p> <ul> <li>The sensor will be added to the database only after clicking the save button.</li> <li>Above the table you can see the toggles that are responsible for which columns in the table will be displayed. If you do not see the parameter you need in the table, make sure that it is not hidden (it is hidden if the toggle of this parameter is not checked).</li> </ul>"},{"location":"user_guide/usage/#editing-sensor-information","title":"\u270f\ufe0f Editing Sensor Information","text":"<ol> <li>Find the sensor you want to edit in the table.</li> <li>In the \"Actions\" column of the corresponding row, click the edit button (\ud83d\udcdd pencil icon).</li> <li>The row will become editable, allowing you to modify the sensor details.</li> <li>Make the necessary changes to the fields.</li> <li>Click the save button (\ud83d\udcbe) in the same row to apply the changes.</li> </ol> <p>\ud83d\udccc Note:</p> <ul> <li>The changes will not be saved unless you click the save button.</li> <li>Above the table you can see the toggles that are responsible for which columns in the table will be displayed. If you do not see the parameter you need in the table, make sure that it is not hidden (it is hidden if the toggle of this parameter is not checked).</li> </ul>"},{"location":"user_guide/usage/#deleting-a-sensor","title":"\ud83d\uddd1\ufe0f Deleting a Sensor","text":"<ol> <li>Find the sensor you want to delete in the table.</li> <li>In the \"Actions\" column of the corresponding row, click the delete button (\u274c).</li> <li>A confirmation dialog may appear asking if you are sure you want to delete the sensor.</li> <li>Confirm the deletion. The sensor will be permanently removed from the list.</li> </ol> <p>\ud83d\udccc Note: This action cannot be undone. Once deleted, the sensor must be added again manually if needed.</p>"},{"location":"user_guide/usage/#editing-or-adding-sensor-configuration","title":"\u2699\ufe0f Editing or Adding Sensor Configuration","text":"<p>This guide explains how to modify an existing configuration or add a new one for a sensor.</p>"},{"location":"user_guide/usage/#opening-the-configuration-editor","title":"\ud83d\udd27 Opening the Configuration Editor","text":"<ol> <li>In the sensor list, locate the \"Config\" column.</li> <li>If a configuration exists, it will be displayed in this column. Otherwise, you will see \"No configuration given\".</li> <li>Click the \"Edit Config\" button to open the configuration editor.</li> </ol>"},{"location":"user_guide/usage/#using-the-configuration-editor","title":"\ud83d\udda5\ufe0f Using the Configuration Editor","text":"<ol> <li>When you click \"Edit Config\", a popup window will appear.</li> <li>\u26a0\ufe0f Warning: If you click outside the popup, it will automatically close, and any unsaved changes will be lost.</li> </ol>"},{"location":"user_guide/usage/#selecting-a-sensor-type","title":"\ud83d\udd04 Selecting a Sensor Type","text":"<ol> <li>Locate the \"Sensor Type\" dropdown at the top of the popup.</li> <li>Select a specific sensor type:</li> <li>If you choose a type, the system will automatically provide predefined configuration fields.</li> <li>If you do not select a type, you will need to manually enter all fields for the configuration.</li> </ol>"},{"location":"user_guide/usage/#adding-configuration-fields","title":"\u2795 Adding Configuration Fields","text":"<ol> <li>Below \"Edit configuration\", you will see two input fields labeled \"Key\" and \"Value\".</li> <li>Enter a configuration key (e.g., <code>threshold</code>, <code>update_interval</code>).</li> <li>Enter the corresponding value (e.g., <code>30</code>, <code>true</code>).</li> <li>Click the \"Add\" button to insert the configuration entry into the list.</li> <li>The new field will appear below with an option to remove it.</li> </ol>"},{"location":"user_guide/usage/#removing-configuration-fields","title":"\ud83d\uddd1\ufe0f Removing Configuration Fields","text":"<ul> <li>If you want to delete a field from the configuration, click the \"Delete\" button next to that field.</li> <li>The field will be immediately removed from the list.</li> </ul>"},{"location":"user_guide/usage/#saving-or-canceling-changes","title":"\ud83d\udcbe Saving or Canceling Changes","text":"<ol> <li>Once all required fields are added, click the \"Save Changes\" button to confirm the configuration.</li> <li>If you do not want to save your changes, simply click outside the popup to close it.</li> <li>\u26a0\ufe0f Warning: Clicking outside the popup will discard all progress, so be careful when making edits.</li> </ol> <p>\ud83d\udca1 More User Stories Coming Soon! If you encounter any issues, check the Troubleshooting Guide.</p>"}]}